{
  "address": "0xAF63D8C715e96150d3675f9C2d07ae8D7d7A486A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__RaffleNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__SendMoreToEnterRaffle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6ecd92ddca8f6978e73b8c715e46fb6995db66fa8517b267d003cbf7c0dbc330",
  "receipt": {
    "to": null,
    "from": "0x2A80fDc27Cd6E7754C030CC0D2208cF04678451e",
    "contractAddress": "0xAF63D8C715e96150d3675f9C2d07ae8D7d7A486A",
    "transactionIndex": 40,
    "gasUsed": "1177019",
    "logsBloom": "0x
    "blockHash": "0x70ecbcb9f4da2a1aa167331575375a4ba67e8b8a5fe4aa8933b9e97470d02be5",
    "transactionHash": "0x6ecd92ddca8f6978e73b8c715e46fb6995db66fa8517b267d003cbf7c0dbc330",
    "logs": [],
    "blockNumber": 7628293,
    "cumulativeGasUsed": "8864898",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2ca8e0c643bde4c2e08ab1fa0da3401adad7734d",
    "10000000000000000",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "1887",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "e8383cbe32ce36a6338aaadca2720f03",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__RaffleNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__SendMoreToEnterRaffle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\nerror Raffle__RaffleNotOpen();\\nerror Raffle__SendMoreToEnterRaffle();\\nerror Raffle__TransferFailed();\\nerror Raffle__UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\\n\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint256 private immutable i_interval;\\n\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    address private s_recentWinner;\\n    RaffleState private s_state;\\n    uint256 private s_lastTimeStamp;\\n\\n    event RequestRaffleWinner(uint256 indexed requestId);\\n    event RaffleEnter(address indexed player);\\n    event WinnerPicked(address indexed player);\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint256 entranceFee,\\n        bytes32 gasLane,\\n        uint64 subId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) \\n    {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subId = subId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        i_interval = interval;\\n        s_state = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n    }\\n\\n    function enterRaffle() public payable {\\n        if (msg.value < i_entranceFee) {revert Raffle__SendMoreToEnterRaffle();}\\n        if (s_state != RaffleState.OPEN) {revert Raffle__RaffleNotOpen();}\\n        \\n        s_players.push(payable(msg.sender));\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    function checkUpkeep(bytes memory /*checkData*/)\\n     public view override returns (bool upkeepNeeded, bytes memory /*performData*/) {\\n        upkeepNeeded = (RaffleState.OPEN == s_state) &&        // is open\\n         ((block.timestamp - s_lastTimeStamp) > i_interval) && // has time stamp\\n         s_players.length > 0 &&                               // has player\\n         address(this).balance > 0;                            // has amount\\n        return (upkeepNeeded, \\\"0x0\\\");\\n    }\\n\\n    function performUpkeep(bytes calldata /*performData*/) external override {\\n        (bool needed, ) = checkUpkeep(\\\"\\\");\\n        if (!needed) {revert Raffle__UpkeepNotNeeded(address(this).balance, s_players.length, uint256(s_state));}\\n        s_state = RaffleState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane, i_subId, REQUEST_CONFIRMATIONS, i_callbackGasLimit, NUM_WORDS\\n        );\\n        emit RequestRaffleWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(uint256 /*requestId*/, uint256[] memory randomWords) internal override {\\n        address payable winner = s_players[randomWords[0] % s_players.length];\\n        s_recentWinner = winner;\\n\\n        (bool success, ) = winner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {revert Raffle__TransferFailed();}\\n\\n        s_players = new address payable[](0);\\n        s_state = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n\\n        emit WinnerPicked(winner);\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getNumPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n    \\n    function getLastTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getState() public view returns (RaffleState) {\\n        return s_state;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n}\",\"keccak256\":\"0x3f16905c8be3b6028adec473d18e35bb1a5e771781c80d68f80313d8f53d677d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200178938038062001789833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250508061014081815250506000600160146101000a81548160ff0219169083600181111562000116576200011562000330565b5b0217905550426002819055505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e0516101005161012051610140516113ba620003cf6000396000818161075201526107e30152600061061f015260006105fc015260006105db0152600061059f01526000818161027e015261037b0152600081816102bb015261030f01526113ba6000f3fe60806040526004361061009c5760003560e01c8063473f1ddc11610064578063473f1ddc1461015357806355c9e9261461017e5780636e04ff0d146101a957806391ad27b4146101e7578063c1c244e814610212578063e55ae4e81461023d5761009c565b806309bc33a7146100a15780631865c57d146100cc5780631fe543e3146100f75780632cfcc539146101205780634585e33b1461012a575b600080fd5b3480156100ad57600080fd5b506100b661027a565b6040516100c39190610b44565b60405180910390f35b3480156100d857600080fd5b506100e16102a2565b6040516100ee9190610bd6565b60405180910390f35b34801561010357600080fd5b5061011e60048036038101906101199190610d8a565b6102b9565b005b610128610379565b005b34801561013657600080fd5b50610151600480360381019061014c9190610e41565b6104e8565b005b34801561015f57600080fd5b506101686106d8565b6040516101759190610ecf565b60405180910390f35b34801561018a57600080fd5b50610193610702565b6040516101a09190610b44565b60405180910390f35b3480156101b557600080fd5b506101d060048036038101906101cb9190610f9f565b61070e565b6040516101de929190611082565b60405180910390f35b3480156101f357600080fd5b506101fc6107df565b6040516102099190610b44565b60405180910390f35b34801561021e57600080fd5b50610227610807565b6040516102349190610b44565b60405180910390f35b34801561024957600080fd5b50610264600480360381019061025f91906110b2565b610811565b6040516102719190610ecf565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036b57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103629291906110df565b60405180910390fd5b6103758282610858565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156103d3576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156103e7576103e6610b5f565b5b600160149054906101000a900460ff16600181111561040957610408610b5f565b5b14610440576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105026040518060200160405280600081525061070e565b509050806105715747600080549050600160149054906101000a900460ff16600181111561053357610532610b5f565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161056893929190611108565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561059657610595610b5f565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106609594939291906111b7565b6020604051808303816000875af115801561067f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a3919061121f565b9050807fde6349b018d6c03d837b67d9a198a6ba4842546f2295fe963fae141e5dbaef8160405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008080549050905090565b60006060600160149054906101000a900460ff16600181111561073457610733610b5f565b5b6000600181111561074857610747610b5f565b5b14801561078157507f00000000000000000000000000000000000000000000000000000000000000006002544261077f919061127b565b115b8015610791575060008080549050115b801561079d5750600047115b9150816040518060400160405280600381526020017f307830000000000000000000000000000000000000000000000000000000000081525091509150915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b6000808281548110610826576108256112af565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008060008054905083600081518110610875576108746112af565b5b6020026020010151610887919061130d565b81548110610898576108976112af565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff164760405161092c9061136f565b60006040518083038185875af1925050503d8060008114610969576040519150601f19603f3d011682016040523d82523d6000602084013e61096e565b606091505b50509050806109a9576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600067ffffffffffffffff8111156109c4576109c3610c47565b5b6040519080825280602002602001820160405280156109f25781602001602082028036833780820191505090505b5060009080519060200190610a08929190610a84565b506000600160146101000a81548160ff02191690836001811115610a2f57610a2e610b5f565b5b0217905550426002819055508173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a250505050565b828054828255906000526020600020908101928215610afd579160200282015b82811115610afc5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610aa4565b5b509050610b0a9190610b0e565b5090565b5b80821115610b27576000816000905550600101610b0f565b5090565b6000819050919050565b610b3e81610b2b565b82525050565b6000602082019050610b596000830184610b35565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610b9f57610b9e610b5f565b5b50565b6000819050610bb082610b8e565b919050565b6000610bc082610ba2565b9050919050565b610bd081610bb5565b82525050565b6000602082019050610beb6000830184610bc7565b92915050565b6000604051905090565b600080fd5b600080fd5b610c0e81610b2b565b8114610c1957600080fd5b50565b600081359050610c2b81610c05565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c7f82610c36565b810181811067ffffffffffffffff82111715610c9e57610c9d610c47565b5b80604052505050565b6000610cb1610bf1565b9050610cbd8282610c76565b919050565b600067ffffffffffffffff821115610cdd57610cdc610c47565b5b602082029050602081019050919050565b600080fd5b6000610d06610d0184610cc2565b610ca7565b90508083825260208201905060208402830185811115610d2957610d28610cee565b5b835b81811015610d525780610d3e8882610c1c565b845260208401935050602081019050610d2b565b5050509392505050565b600082601f830112610d7157610d70610c31565b5b8135610d81848260208601610cf3565b91505092915050565b60008060408385031215610da157610da0610bfb565b5b6000610daf85828601610c1c565b925050602083013567ffffffffffffffff811115610dd057610dcf610c00565b5b610ddc85828601610d5c565b9150509250929050565b600080fd5b60008083601f840112610e0157610e00610c31565b5b8235905067ffffffffffffffff811115610e1e57610e1d610de6565b5b602083019150836001820283011115610e3a57610e39610cee565b5b9250929050565b60008060208385031215610e5857610e57610bfb565b5b600083013567ffffffffffffffff811115610e7657610e75610c00565b5b610e8285828601610deb565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610eb982610e8e565b9050919050565b610ec981610eae565b82525050565b6000602082019050610ee46000830184610ec0565b92915050565b600080fd5b600067ffffffffffffffff821115610f0a57610f09610c47565b5b610f1382610c36565b9050602081019050919050565b82818337600083830152505050565b6000610f42610f3d84610eef565b610ca7565b905082815260208101848484011115610f5e57610f5d610eea565b5b610f69848285610f20565b509392505050565b600082601f830112610f8657610f85610c31565b5b8135610f96848260208601610f2f565b91505092915050565b600060208284031215610fb557610fb4610bfb565b5b600082013567ffffffffffffffff811115610fd357610fd2610c00565b5b610fdf84828501610f71565b91505092915050565b60008115159050919050565b610ffd81610fe8565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561103d578082015181840152602081019050611022565b60008484015250505050565b600061105482611003565b61105e818561100e565b935061106e81856020860161101f565b61107781610c36565b840191505092915050565b60006040820190506110976000830185610ff4565b81810360208301526110a98184611049565b90509392505050565b6000602082840312156110c8576110c7610bfb565b5b60006110d684828501610c1c565b91505092915050565b60006040820190506110f46000830185610ec0565b6111016020830184610ec0565b9392505050565b600060608201905061111d6000830186610b35565b61112a6020830185610b35565b6111376040830184610b35565b949350505050565b6000819050919050565b6111528161113f565b82525050565b600067ffffffffffffffff82169050919050565b61117581611158565b82525050565b600061ffff82169050919050565b6111928161117b565b82525050565b600063ffffffff82169050919050565b6111b181611198565b82525050565b600060a0820190506111cc6000830188611149565b6111d9602083018761116c565b6111e66040830186611189565b6111f360608301856111a8565b61120060808301846111a8565b9695505050505050565b60008151905061121981610c05565b92915050565b60006020828403121561123557611234610bfb565b5b60006112438482850161120a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061128682610b2b565b915061129183610b2b565b92508282039050818111156112a9576112a861124c565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061131882610b2b565b915061132383610b2b565b925082611333576113326112de565b5b828206905092915050565b600081905092915050565b50565b600061135960008361133e565b915061136482611349565b600082019050919050565b600061137a8261134c565b915081905091905056fea2646970667358221220396d426a71366d67b5938f73f8e1c336cc6728eef855101d908b70dc5be935b164736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c8063473f1ddc11610064578063473f1ddc1461015357806355c9e9261461017e5780636e04ff0d146101a957806391ad27b4146101e7578063c1c244e814610212578063e55ae4e81461023d5761009c565b806309bc33a7146100a15780631865c57d146100cc5780631fe543e3146100f75780632cfcc539146101205780634585e33b1461012a575b600080fd5b3480156100ad57600080fd5b506100b661027a565b6040516100c39190610b44565b60405180910390f35b3480156100d857600080fd5b506100e16102a2565b6040516100ee9190610bd6565b60405180910390f35b34801561010357600080fd5b5061011e60048036038101906101199190610d8a565b6102b9565b005b610128610379565b005b34801561013657600080fd5b50610151600480360381019061014c9190610e41565b6104e8565b005b34801561015f57600080fd5b506101686106d8565b6040516101759190610ecf565b60405180910390f35b34801561018a57600080fd5b50610193610702565b6040516101a09190610b44565b60405180910390f35b3480156101b557600080fd5b506101d060048036038101906101cb9190610f9f565b61070e565b6040516101de929190611082565b60405180910390f35b3480156101f357600080fd5b506101fc6107df565b6040516102099190610b44565b60405180910390f35b34801561021e57600080fd5b50610227610807565b6040516102349190610b44565b60405180910390f35b34801561024957600080fd5b50610264600480360381019061025f91906110b2565b610811565b6040516102719190610ecf565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036b57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103629291906110df565b60405180910390fd5b6103758282610858565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156103d3576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156103e7576103e6610b5f565b5b600160149054906101000a900460ff16600181111561040957610408610b5f565b5b14610440576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105026040518060200160405280600081525061070e565b509050806105715747600080549050600160149054906101000a900460ff16600181111561053357610532610b5f565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161056893929190611108565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561059657610595610b5f565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106609594939291906111b7565b6020604051808303816000875af115801561067f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a3919061121f565b9050807fde6349b018d6c03d837b67d9a198a6ba4842546f2295fe963fae141e5dbaef8160405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008080549050905090565b60006060600160149054906101000a900460ff16600181111561073457610733610b5f565b5b6000600181111561074857610747610b5f565b5b14801561078157507f00000000000000000000000000000000000000000000000000000000000000006002544261077f919061127b565b115b8015610791575060008080549050115b801561079d5750600047115b9150816040518060400160405280600381526020017f307830000000000000000000000000000000000000000000000000000000000081525091509150915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b6000808281548110610826576108256112af565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008060008054905083600081518110610875576108746112af565b5b6020026020010151610887919061130d565b81548110610898576108976112af565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff164760405161092c9061136f565b60006040518083038185875af1925050503d8060008114610969576040519150601f19603f3d011682016040523d82523d6000602084013e61096e565b606091505b50509050806109a9576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600067ffffffffffffffff8111156109c4576109c3610c47565b5b6040519080825280602002602001820160405280156109f25781602001602082028036833780820191505090505b5060009080519060200190610a08929190610a84565b506000600160146101000a81548160ff02191690836001811115610a2f57610a2e610b5f565b5b0217905550426002819055508173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a250505050565b828054828255906000526020600020908101928215610afd579160200282015b82811115610afc5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610aa4565b5b509050610b0a9190610b0e565b5090565b5b80821115610b27576000816000905550600101610b0f565b5090565b6000819050919050565b610b3e81610b2b565b82525050565b6000602082019050610b596000830184610b35565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610b9f57610b9e610b5f565b5b50565b6000819050610bb082610b8e565b919050565b6000610bc082610ba2565b9050919050565b610bd081610bb5565b82525050565b6000602082019050610beb6000830184610bc7565b92915050565b6000604051905090565b600080fd5b600080fd5b610c0e81610b2b565b8114610c1957600080fd5b50565b600081359050610c2b81610c05565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c7f82610c36565b810181811067ffffffffffffffff82111715610c9e57610c9d610c47565b5b80604052505050565b6000610cb1610bf1565b9050610cbd8282610c76565b919050565b600067ffffffffffffffff821115610cdd57610cdc610c47565b5b602082029050602081019050919050565b600080fd5b6000610d06610d0184610cc2565b610ca7565b90508083825260208201905060208402830185811115610d2957610d28610cee565b5b835b81811015610d525780610d3e8882610c1c565b845260208401935050602081019050610d2b565b5050509392505050565b600082601f830112610d7157610d70610c31565b5b8135610d81848260208601610cf3565b91505092915050565b60008060408385031215610da157610da0610bfb565b5b6000610daf85828601610c1c565b925050602083013567ffffffffffffffff811115610dd057610dcf610c00565b5b610ddc85828601610d5c565b9150509250929050565b600080fd5b60008083601f840112610e0157610e00610c31565b5b8235905067ffffffffffffffff811115610e1e57610e1d610de6565b5b602083019150836001820283011115610e3a57610e39610cee565b5b9250929050565b60008060208385031215610e5857610e57610bfb565b5b600083013567ffffffffffffffff811115610e7657610e75610c00565b5b610e8285828601610deb565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610eb982610e8e565b9050919050565b610ec981610eae565b82525050565b6000602082019050610ee46000830184610ec0565b92915050565b600080fd5b600067ffffffffffffffff821115610f0a57610f09610c47565b5b610f1382610c36565b9050602081019050919050565b82818337600083830152505050565b6000610f42610f3d84610eef565b610ca7565b905082815260208101848484011115610f5e57610f5d610eea565b5b610f69848285610f20565b509392505050565b600082601f830112610f8657610f85610c31565b5b8135610f96848260208601610f2f565b91505092915050565b600060208284031215610fb557610fb4610bfb565b5b600082013567ffffffffffffffff811115610fd357610fd2610c00565b5b610fdf84828501610f71565b91505092915050565b60008115159050919050565b610ffd81610fe8565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561103d578082015181840152602081019050611022565b60008484015250505050565b600061105482611003565b61105e818561100e565b935061106e81856020860161101f565b61107781610c36565b840191505092915050565b60006040820190506110976000830185610ff4565b81810360208301526110a98184611049565b90509392505050565b6000602082840312156110c8576110c7610bfb565b5b60006110d684828501610c1c565b91505092915050565b60006040820190506110f46000830185610ec0565b6111016020830184610ec0565b9392505050565b600060608201905061111d6000830186610b35565b61112a6020830185610b35565b6111376040830184610b35565b949350505050565b6000819050919050565b6111528161113f565b82525050565b600067ffffffffffffffff82169050919050565b61117581611158565b82525050565b600061ffff82169050919050565b6111928161117b565b82525050565b600063ffffffff82169050919050565b6111b181611198565b82525050565b600060a0820190506111cc6000830188611149565b6111d9602083018761116c565b6111e66040830186611189565b6111f360608301856111a8565b61120060808301846111a8565b9695505050505050565b60008151905061121981610c05565b92915050565b60006020828403121561123557611234610bfb565b5b60006112438482850161120a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061128682610b2b565b915061129183610b2b565b92508282039050818111156112a9576112a861124c565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061131882610b2b565b915061132383610b2b565b925082611333576113326112de565b5b828206905092915050565b600081905092915050565b50565b600061135960008361133e565b915061136482611349565b600082019050919050565b600061137a8261134c565b915081905091905056fea2646970667358221220396d426a71366d67b5938f73f8e1c336cc6728eef855101d908b70dc5be935b164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 196,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 215,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 218,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_state",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)191"
      },
      {
        "astId": 220,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)191": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}